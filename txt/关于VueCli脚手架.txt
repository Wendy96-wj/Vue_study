# 一、什么是Vue-CLi ？

## 1.Vue-CLi的安装

全局安装：npm install -g @vue/cli   （脚手架3）

```bash
npm install -g @vue/cli
```

还想用脚手架2  可拉取2.x模板：

```bash
npm install -g @vue/cli-init
```

Vue CLi2初始化项目：

```bash
# `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同
vue init webpack my-project
```

Vue CLi3 初始化项目：

```bash
vue create hello-world
```

## 2.Vue-CLi 2的项目以及学习

### 2.1 vue cli2初始化项目

ESlint-> lint 限制，ESlint是对js限制，代码必须规范，否则编译器就会提示报错。

unit test 单元测试

e2e test->end to end 端到端测试  安装Nightwatch,是一个利用seleium或webdriver或phantomis等进行自动化测试的框架

![image-20191105095745433](D:\Wendy\vue_workspace\study-work\txt\img\vue-cli2.png)

### 2.2 vue cli2的目录结构解析

#### (1) package.json

![image-20191105111849125](D:\Wendy\vue_workspace\study-work\txt\img\package.png)

"dev":npm run dev 会启动本地服务

"build":npm run build(打包项目)    

build 和 config文件是一些配置相关的东西

#### (2)src文件

存放代码文件的地方

#### (3)static文件

存放静待资源文件，打包的时候会原封不动的存放在dist文件里

## 3.安装CLI错误和ESLint规范

关闭ESLint：在config文件里的index.js->useEslint: true,->false

## 4.runtime-complier 和 runtime-only的区别

### 4.1 runtime-complier

![image-20191105145158271](D:\Wendy\vue_workspace\study-work\txt\img\runtime-complier.png)

执行过程：template -> ast -> render -> vdom -> ui

![image-20191105150855758](D:\Wendy\vue_workspace\study-work\txt\img\runtime-complier02.png)

![image-20191105151439079](D:\Wendy\vue_workspace\study-work\txt\img\runtime-complier03.png)

### 4.2 runtime-only

![image-20191105145402128](D:\Wendy\vue_workspace\study-work\txt\img\runtime-only.png)

执行过程：render -> vdom ->ui

那么，vue文件中的template是由谁处理的呢？

答：是由vue-template-complier 处理的 

### 4.3 总结

runtime-only 性能更高，代码量更少；

## 5.Vue-CLi 3创建项目和目录结构

### 5.1  vue-cli 3 与 2 版本有很大区别

(1)vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webpack 3

(2)vue-cli 3 的设计原则是“0”配置，移除的配置文件根目录下的，build和config等目录

(3)vue-cli 3 提供了vue ui 命令，提供了可视化配置，更加人性化

(4)移除了static文件夹，新增了public文件夹，并且index.html移动到public中

### 5.2 初始化项目过程

![image-20191105153953156](D:\Wendy\vue_workspace\study-work\txt\img\vue-cli3.png)

按“空格“选择自己想要的配置

![image-20191105154632981](D:\Wendy\vue_workspace\study-work\txt\img\vue-cli3-1.png)

### 5.3 运行vue-cli3

npm run serve

![image-20191105155754862](D:\Wendy\vue_workspace\study-work\txt\img\vue-cli3-2.png)

### 5.4  配置文件的查看和修改

(1)命令：vue ui 进入项目管理

![image-20191105161904306](D:\Wendy\vue_workspace\study-work\txt\img\vue_ui01.png)

(2) 查看配置文件

![image-20191105163323686](D:\Wendy\vue_workspace\study-work\txt\img\vue_ui02.png)

node_modules -> @vue -> cli-service -> lib里的文件中查看

(3) 修改配置文件

在自己当前目录文件下创建一个vue.config.js文件，把需要修改的配置写在里面

## 6.箭头函数的使用和this指向

### 6.1 箭头函数的基本使用

箭头函数：也是一种定义函数的方式

(1) 定义函数的方式 ：function

(2) 对象字面量中定义函数

(3)ES6中的箭头函数

->无参数的

eg: const wendy = ()=>{  }

->有参数的

放入两个参数

eg: const num  = (num1, num2)=>{

​	return num1+ num2;

}

放入一个参数   参数的括号可以省略

eg:const power =  num  => {

​	return  num + num

}

->函数的返回值

返回多行代码

const test = () => {

​	console.log('hahahah');

​	console.log('lalalalala');

}

返回一行代码  (return 可以省略)

const mul = (num1 , num2) => num1 * num2

### 6.2 箭头函数中this的使用

问：什么时候使用箭头函数？

答：大箭头函数中的this引用的就是最近作用域中的this

问：箭头函数中的this是如何查找的呢？

答：向外层作用域中，一层层查找this，直到有this的定义。

# 二、Vue-Router

## 1.什么是路由？

Vue Router 是 [Vue.js](http://cn.vuejs.org/) 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：

- 嵌套的路由/视图表
- 模块化的、基于组件的路由配置
- 路由参数、查询、通配符
- 基于 Vue.js 过渡系统的视图过渡效果
- 细粒度的导航控制
- 带有自动激活的 CSS class 的链接
- HTML5 历史模式或 hash 模式，在 IE9 中自动降级
- 自定义的滚动条行为

## 2.前后端渲染和前后端路由

### 2.1 后端路由渲染

jsp:java server page

后端路由：后端处理URL和页面之间的映射关系

### 2.2 前后端分离

(1)后端只负责提供数据，不负责任何阶段的内容

(2)前端渲染：浏览器中显示的网页中的大部分内容，都是由前端写的js代码在浏览器中执行，最终渲染出来的网页。

(3)SPA页面：

SPA:单页面富应用

整个网页只有一个html页面

### 2.3 url的hash 和 HTML5的history

location.hash = 'aaa'

![image-20191106104946109](D:\Wendy\vue_workspace\study-work\txt\img\hash.png)

history.pushState({},'','home')   入栈

history.back() 出栈 = history.go(-1)

history.forward()  = history.go(1)

history.go(-2)   history.go(2)

history.replaceState({},'','home')   替换页面 不可返回

## 3.vue-router 安装和配置方式

### 3.1  安装vue-router

npm install vue-router --save

### 3.2 配置方式

在src中router文件中新建index.js文件，一般都会配置好

![image-20191106111409777](D:\Wendy\vue_workspace\study-work\txt\img\vue-router01.png)

![image-20191106111446448](D:\Wendy\vue_workspace\study-work\txt\img\vue-router02.png)

### 3.3 路由和组件的映射关系

![image-20191106140918370](D:\Wendy\vue_workspace\study-work\txt\img\vue-router03.png)

![image-20191106140802376](D:\Wendy\vue_workspace\study-work\txt\img\vue-router04.png)

![image-20191106134835326](D:\Wendy\vue_workspace\study-work\txt\img\vue-router05.png)

### 3.4 router-link的其他属性标签

（1）tag属性：可以指定为渲染成什么组件

![image-20191106141231542](D:\Wendy\vue_workspace\study-work\txt\img\vue-link01.png)

![image-20191106141244183](D:\Wendy\vue_workspace\study-work\txt\img\vue-link02.png)

（2）replace  路由将不可返回  被替代的意思

![image-20191106141539766](D:\Wendy\vue_workspace\study-work\txt\img\vue-link03.png)

（3）router-link-active 

![image-20191106142319782](D:\Wendy\vue_workspace\study-work\txt\img\vue-link04.png)

![image-20191106142344710](D:\Wendy\vue_workspace\study-work\txt\img\vue-link05.png)

## 4. 通过代码跳转路由

![image-20191106143629526](D:\Wendy\vue_workspace\study-work\txt\img\router01.png)

### 4.1  动态路由

![image-20191106150218753](D:\Wendy\vue_workspace\study-work\txt\img\router02.png)

![image-20191106150253798](D:\Wendy\vue_workspace\study-work\txt\img\router03.png)

![image-20191106150429686](D:\Wendy\vue_workspace\study-work\txt\img\router04.png)

## 5. 路由的懒加载

### 5.1 打包解析

打包：npm run build

解析：build/webpack.prod.conf.js ->UglifyJsPlugin插件 注释了 重新打包

### 5.2 路由的懒加载

（1）路由懒加载：主要作用就是将路由对应的组件打包成一个个的js代码，只有在这个路由被访问到的时候，才加载对应的组件

（2）懒加载的方式

![image-20191106155007878](D:\Wendy\vue_workspace\study-work\txt\img\router05.png)

![image-20191106155320706](D:\Wendy\vue_workspace\study-work\txt\img\router06.png)

## 6. 路由的嵌套

### 6.1 两个步骤

（1）创建对应的子组件，并且在路由映射中配置对应的子路由；

（2）在组件内部使用<router-view>标签。

### 6.2 代码的实现

(1) 先在src文件中components文件下创建子路由文件HomeNews.vue和HomeMessage.vue;

![image-20191106161400122](D:\Wendy\vue_workspace\study-work\txt\img\router07.png)

(2)在src文件中router文件下index.js配置路由映射关系

![image-20191106161831693](D:\Wendy\vue_workspace\study-work\txt\img\router08.png)

（3）在Home.vue中实现路由

![image-20191106161935994](D:\Wendy\vue_workspace\study-work\txt\img\router09.png)

## 7.vue-router的参数传递

### 7.1 传递参数的方式

传递参数主要有两种类型：params和query

（1）params的类型

配置的路由格式：**/router/:id**

传递的方式：**在path后面跟上对应的值**

传递后形成的路径：**/router/123, /router/abc**

(2) query 的类型

配置的路由格式：**/router**，也就是普通配置

传递的方式：对象中使用**query的key作为传递方式**

传递后形成的路径：**/router？id=123, /router?id=abc**

### 7.2  代码实现 

（1）在组件中直接传参

![image-20191106165450094](D:\Wendy\vue_workspace\study-work\txt\img\canshu01.png)

![image-20191106165426457](D:\Wendy\vue_workspace\study-work\txt\img\canshu02.png)

![image-20191106171027489](D:\Wendy\vue_workspace\study-work\txt\img\canshu03.png)

![image-20191106171059976](D:\Wendy\vue_workspace\study-work\txt\img\canshu04.png)

（2）运用代码传参

![image-20191106171904383](D:\Wendy\vue_workspace\study-work\txt\img\canshu05.png)

## 8. router  和 route的由来

### 8.1 关于router

![image-20191106173251801](D:\Wendy\vue_workspace\study-work\txt\img\router&&route-from01.png)

![image-20191106173435336](D:\Wendy\vue_workspace\study-work\txt\img\router&&route-from02.png)

### 8.2 关于route

![image-20191106173701213](D:\Wendy\vue_workspace\study-work\txt\img\router&&route-from03.png)

就是当前活跃的路由

结论：所有的组件都继承着Vue的原型 （可以看router的源码）

## 9. 导航守卫

### 9.1 全局导航守卫

（1）可以在每个模板vue里添加created()函数

![image-20191107092640924](D:\Wendy\vue_workspace\study-work\txt\img\navtitle01.png)

来实现网页标题的修改，但是当组件多的时候这种操作就会很麻烦！

（2）可在router文件下index.js路由中

![image-20191107092848817](D:\Wendy\vue_workspace\study-work\txt\img\navtitle02.png)

![image-20191107092901053](D:\Wendy\vue_workspace\study-work\txt\img\navtitle03.png)

实现全局导航守卫

补充：

**beforeEach** 和 **afterEach** 都属于全局守卫

![image-20191107093703061](D:\Wendy\vue_workspace\study-work\txt\img\navtitle04.png)

还有**路由独享的守卫**，**组件内的守卫**

### 9.2 路由独享的守卫

 在路由配置上直接定义 `beforeEnter` 守卫： 

```js
const router = new VueRouter({
  routes: [
    {
      path: '/foo',
      component: Foo,
      beforeEnter: (to, from, next) => {
        // ...
      }
    }
  ]
})
```

 这些守卫与全局前置守卫的方法参数是一样的。 

### 9.3 组件内的守卫

- `beforeRouteEnter`

- `beforeRouteUpdate` (2.2 新增)

- `beforeRouteLeave`

  ```js
  const Foo = {
    template: `...`,
    beforeRouteEnter (to, from, next) {
      // 在渲染该组件的对应路由被 confirm 前调用
      // 不！能！获取组件实例 `this`
      // 因为当守卫执行前，组件实例还没被创建
    },
    beforeRouteUpdate (to, from, next) {
      // 在当前路由改变，但是该组件被复用时调用
      // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
      // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
      // 可以访问组件实例 `this`
    },
    beforeRouteLeave (to, from, next) {
      // 导航离开该组件的对应路由时调用
      // 可以访问组件实例 `this`
    }
  }
  ```

官网详情：https://router.vuejs.org/zh/guide/advanced/navigation-guards.html

## 10. 关于keep-alive

keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。

![image-20191107152442721](D:\Wendy\vue_workspace\study-work\txt\img\keep-alive.png)

router-view也是一个组件，如果直接被包在keep-alive里面，所有路径匹配到的视图组件都会被缓存。

![image-20191107152509818](D:\Wendy\vue_workspace\study-work\txt\img\keep-alive02.png)

**keep-alive两个非常重要的属性**：

**include** - 字符串或正则表达，只有匹配的组件会被缓存；

**exclude** - 字符串或正则表达，任何匹配的组件都不会被缓存。

![image-20191107152952302](D:\Wendy\vue_workspace\study-work\txt\img\keep-alive03.png)

只有Profile组件不会被缓存，exclude=“Profile,User”(多个)

# 三、关于TabBar

## 1.tabBar-基本结构搭建

![image-20191107154143743](D:\Wendy\vue_workspace\study-work\txt\img\tabBar01.png)

## 2. 实现方法

见项目文件:my_tabbar

# 四、关于 Promise （ES6）

## 1. promise的基本使用

promise是异步编程的一种解决方案。

![image-20191108135442589](D:\Wendy\vue_workspace\study-work\txt\img\promise01.png)

问：什么情况下会用到promise？

答：一般情况下是有异步操作时，使用Promise对异步操作进行封装

![image-20191108142854818](D:\Wendy\vue_workspace\study-work\txt\img\promise02.png)

## 2. promise 的三种状态

![image-20191108143107630](D:\Wendy\vue_workspace\study-work\txt\img\promise03.png)

另一种写法：只写一个then，写两个函数分别调用

![image-20191108144358679](D:\Wendy\vue_workspace\study-work\txt\img\promise04.png)

## 3. promise 的链式调用

![image-20191108150626656](D:\Wendy\vue_workspace\study-work\txt\img\promise05.png)

## 4. promise的all方法使用

![image-20191108152215693](D:\Wendy\vue_workspace\study-work\txt\img\promise06.png)

![image-20191108152227041](D:\Wendy\vue_workspace\study-work\txt\img\promise07.png)

# 五、VueX

## 1.什么是vuex？

官网：https://vuex.vuejs.org/zh/

![image-20191108162619351](D:\Wendy\vue_workspace\study-work\txt\img\vuex01.png)

## 2. 单界面到多界面状态管理切换

![image-20191108172407310](D:\Wendy\vue_workspace\study-work\txt\img\vuex02.png)

## 3. vuex的安装

安装命令：npm install vuex --save

![image-20191111102447228](D:\Wendy\vue_workspace\study-work\txt\img\vuex03.png)

![image-20191111102325184](D:\Wendy\vue_workspace\study-work\txt\img\vuex03_1.png)

## 4. 核心概念

### 4.1 state

![image-20191111103627108](D:\Wendy\vue_workspace\study-work\txt\img\vue-pic.png)

同步操作：可直接Vue Components --> Mutations -->State

异步操作：要进过Vue Components -->Actions处理 -->Mutations -->State

State单一状态树： Vuex 使用**单一状态树**——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 ([SSOT](https://en.wikipedia.org/wiki/Single_source_of_truth))”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。 

### 4.2 mutations

![image-20191111132503931](D:\Wendy\vue_workspace\study-work\txt\img\mutations.png)

![image-20191111132615954](D:\Wendy\vue_workspace\study-work\txt\img\mutations02.png)

 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数： 

```js
const store = new Vuex.Store({
  state: {
    count: 1
  },
  mutations: {
    increment (state) {
      // 变更状态
      state.count++
    }
  }
})
```

**vuex-mutation的携带参数**： 你可以向 `store.commit` 传入额外的参数，即 mutation 的 **载荷（payload）**

![image-20191111152841031](D:\Wendy\vue_workspace\study-work\txt\img\mutations03.png)

![image-20191111152829034](D:\Wendy\vue_workspace\study-work\txt\img\mutations04.png)

![image-20191111152901461](D:\Wendy\vue_workspace\study-work\txt\img\mutations05.png)

提交风格：

![image-20191111153535073](D:\Wendy\vue_workspace\study-work\txt\img\mutations06.png)

![image-20191111153645840](D:\Wendy\vue_workspace\study-work\txt\img\mutations07.png)

vue.set(state.info,'address','武汉') 添加属性

vue.delete(state.info,'age')   删除属性

**使用常量替代 Mutation 事件类型**

使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：

```js
// mutation-types.js
export const SOME_MUTATION = 'SOME_MUTATION'
// store.js
import Vuex from 'vuex'
import { SOME_MUTATION } from './mutation-types'

const store = new Vuex.Store({
  state: { ... },
  mutations: {
    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名
    [SOME_MUTATION] (state) {
      // mutate state
    }
  }
})
```

用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。

### 4.3 Getter 

 Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。 

![image-20191111145723165](D:\Wendy\vue_workspace\study-work\txt\img\getters01.png)

![image-20191111145824428](D:\Wendy\vue_workspace\study-work\txt\img\getters02.png)

### 4.4 Action

Action 类似于 mutation，不同在于：

- Action 提交的是 mutation，而不是直接变更状态。

- Action 可以包含任意异步操作。

  ![image-20191111162954972](D:\Wendy\vue_workspace\study-work\txt\img\action01.png)

  ![image-20191111163026278](D:\Wendy\vue_workspace\study-work\txt\img\action02.png)

  ### 4.5 Module

  由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。

  为了解决以上问题，Vuex 允许我们将 store 分割成**模块（module）**。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：

  ```js
  const moduleA = {
    state: { ... },
    mutations: { ... },
    actions: { ... },
    getters: { ... }
  }
  
  const moduleB = {
    state: { ... },
    mutations: { ... },
    actions: { ... }
  }
  
  const store = new Vuex.Store({
    modules: {
      a: moduleA,
      b: moduleB
    }
  })
  
  store.state.a // -> moduleA 的状态
  store.state.b // -> moduleB 的状态
  ```

### 4.5 store文件夹的目录结构

补充一点ES6的语法：

![image-20191111171422282](D:\Wendy\vue_workspace\study-work\txt\img\es6.png)

Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：

1. 应用层级的状态应该集中到单个 store 对象中。
2. 提交 **mutation** 是更改状态的唯一方法，并且这个过程是同步的。
3. 异步逻辑都应该封装到 **action** 里面。

只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。

对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：

```bash
├── index.html
├── main.js
├── api
│   └── ... # 抽取出API请求
├── components
│   ├── App.vue
│   └── ...
└── store
    ├── index.js          # 我们组装模块并导出 store 的地方
    ├── actions.js        # 根级别的 action
    ├── mutations.js      # 根级别的 mutation
    └── modules
        ├── cart.js       # 购物车模块
        └── products.js   # 产品模块
```

# 六、网络请求的封装（axios）













