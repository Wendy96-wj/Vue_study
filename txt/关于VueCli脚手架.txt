# 一、什么是Vue-CLi ？

## 1.Vue-CLi的安装

全局安装：npm install -g @vue/cli   （脚手架3）

```bash
npm install -g @vue/cli
```

还想用脚手架2  可拉取2.x模板：

```bash
npm install -g @vue/cli-init
```

Vue CLi2初始化项目：

```bash
# `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同
vue init webpack my-project
```

Vue CLi3 初始化项目：

```bash
vue create hello-world
```

## 2.Vue-CLi 2的项目以及学习

### 2.1 vue cli2初始化项目

ESlint-> lint 限制，ESlint是对js限制，代码必须规范，否则编译器就会提示报错。

unit test 单元测试

e2e test->end to end 端到端测试  安装Nightwatch,是一个利用seleium或webdriver或phantomis等进行自动化测试的框架

![image-20191105095745433](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105095745433.png)

### 2.2 vue cli2的目录结构解析

#### (1) package.json

![image-20191105111849125](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105111849125.png)

"dev":npm run dev 会启动本地服务

"build":npm run build(打包项目)    

build 和 config文件是一些配置相关的东西

#### (2)src文件

存放代码文件的地方

#### (3)static文件

存放静待资源文件，打包的时候会原封不动的存放在dist文件里

## 3.安装CLI错误和ESLint规范

关闭ESLint：在config文件里的index.js->useEslint: true,->false

## 4.runtime-complier 和 runtime-only的区别

### 4.1 runtime-complier

![image-20191105145158271](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105145158271.png)

执行过程：template -> ast -> render -> vdom -> ui

![image-20191105150855758](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105150855758.png)

![image-20191105151439079](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105151439079.png)

### 4.2 runtime-only

![image-20191105145402128](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105145402128.png)

执行过程：render -> vdom ->ui

那么，vue文件中的template是由谁处理的呢？

答：是由vue-template-complier 处理的 

### 4.3 总结

runtime-only 性能更高，代码量更少；

## 5.Vue-CLi 3创建项目和目录结构

### 5.1  vue-cli 3 与 2 版本有很大区别

(1)vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webpack 3

(2)vue-cli 3 的设计原则是“0”配置，移除的配置文件根目录下的，build和config等目录

(3)vue-cli 3 提供了vue ui 命令，提供了可视化配置，更加人性化

(4)移除了static文件夹，新增了public文件夹，并且index.html移动到public中

### 5.2 初始化项目过程

![image-20191105153953156](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105153953156.png)

按“空格“选择自己想要的配置

![image-20191105154632981](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105154632981.png)

### 5.3 运行vue-cli3

npm run serve

![image-20191105155754862](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105155754862.png)

### 5.4  配置文件的查看和修改

(1)命令：vue ui 进入项目管理

![image-20191105161904306](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105161904306.png)

(2) 查看配置文件

![image-20191105163323686](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191105163323686.png)

node_modules -> @vue -> cli-service -> lib里的文件中查看

(3) 修改配置文件

在自己当前目录文件下创建一个vue.config.js文件，把需要修改的配置写在里面

## 6.箭头函数的使用和this指向

### 6.1 箭头函数的基本使用

箭头函数：也是一种定义函数的方式

(1) 定义函数的方式 ：function

(2) 对象字面量中定义函数

(3)ES6中的箭头函数

->无参数的

eg: const wendy = ()=>{  }

->有参数的

放入两个参数

eg: const num  = (num1, num2)=>{

​	return num1+ num2;

}

放入一个参数   参数的括号可以省略

eg:const power =  num  => {

​	return  num + num

}

->函数的返回值

返回多行代码

const test = () => {

​	console.log('hahahah');

​	console.log('lalalalala');

}

返回一行代码  (return 可以省略)

const mul = (num1 , num2) => num1 * num2

### 6.2 箭头函数中this的使用

问：什么时候使用箭头函数？

答：大箭头函数中的this引用的就是最近作用域中的this

问：箭头函数中的this是如何查找的呢？

答：向外层作用域中，一层层查找this，直到有this的定义。

# 二、Vue-Router

## 1.什么是路由？

Vue Router 是 [Vue.js](http://cn.vuejs.org/) 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：

- 嵌套的路由/视图表
- 模块化的、基于组件的路由配置
- 路由参数、查询、通配符
- 基于 Vue.js 过渡系统的视图过渡效果
- 细粒度的导航控制
- 带有自动激活的 CSS class 的链接
- HTML5 历史模式或 hash 模式，在 IE9 中自动降级
- 自定义的滚动条行为

## 2.前后端渲染和前后端路由

### 2.1 后端路由渲染

jsp:java server page

后端路由：后端处理URL和页面之间的映射关系

### 2.2 前后端分离

(1)后端只负责提供数据，不负责任何阶段的内容

(2)前端渲染：浏览器中显示的网页中的大部分内容，都是由前端写的js代码在浏览器中执行，最终渲染出来的网页。

(3)SPA页面：

SPA:单页面富应用

整个网页只有一个html页面

### 2.3 url的hash 和 HTML5的history

location.hash = 'aaa'

![image-20191106104946109](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106104946109.png)

history.pushState({},'','home')   入栈

history.back() 出栈 = history.go(-1)

history.forward()  = history.go(1)

history.go(-2)   history.go(2)

history.replaceState({},'','home')   替换页面 不可返回

## 3.vue-router 安装和配置方式

### 3.1  安装vue-router

npm install vue-router --save

### 3.2 配置方式

在src中router文件中新建index.js文件，一般都会配置好

![image-20191106111409777](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106111409777.png)

![image-20191106111446448](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106111446448.png)

### 3.3 路由和组件的映射关系

![image-20191106140918370](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106140918370.png)

![image-20191106140802376](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106140802376.png)

![image-20191106134835326](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106134835326.png)

### 3.4 router-link的其他属性标签

（1）tag属性：可以指定为渲染成什么组件

![image-20191106141231542](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106141231542.png)

![image-20191106141244183](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106141244183.png)

（2）replace  路由将不可返回  被替代的意思

![image-20191106141539766](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106141539766.png)

（3）router-link-active 

![image-20191106142319782](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106142319782.png)

![image-20191106142344710](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106142344710.png)

## 4. 通过代码跳转路由

![image-20191106143629526](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106143629526.png)

### 4.1  动态路由

![image-20191106150218753](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106150218753.png)

![image-20191106150253798](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106150253798.png)

![image-20191106150429686](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106150429686.png)

## 5. 路由的懒加载

### 5.1 打包解析

打包：npm run build

解析：build/webpack.prod.conf.js ->UglifyJsPlugin插件 注释了 重新打包

### 5.2 路由的懒加载

（1）路由懒加载：主要作用就是将路由对应的组件打包成一个个的js代码，只有在这个路由被访问到的时候，才加载对应的组件

（2）懒加载的方式

![image-20191106155007878](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106155007878.png)

![image-20191106155320706](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106155320706.png)

## 6. 路由的嵌套

### 6.1 两个步骤

（1）创建对应的子组件，并且在路由映射中配置对应的子路由；

（2）在组件内部使用<router-view>标签。

### 6.2 代码的实现

(1) 先在src文件中components文件下创建子路由文件HomeNews.vue和HomeMessage.vue;

![image-20191106161400122](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106161400122.png)

(2)在src文件中router文件下index.js配置路由映射关系

![image-20191106161831693](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106161831693.png)

（3）在Home.vue中实现路由

![image-20191106161935994](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106161935994.png)

## 7.vue-router的参数传递

### 7.1 传递参数的方式

传递参数主要有两种类型：params和query

（1）params的类型

配置的路由格式：**/router/:id**

传递的方式：**在path后面跟上对应的值**

传递后形成的路径：**/router/123, /router/abc**

(2) query 的类型

配置的路由格式：**/router**，也就是普通配置

传递的方式：对象中使用**query的key作为传递方式**

传递后形成的路径：**/router？id=123, /router?id=abc**

### 7.2  代码实现 

（1）在组件中直接传参

![image-20191106165450094](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106165450094.png)

![image-20191106165426457](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106165426457.png)

![image-20191106171027489](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106171027489.png)

![image-20191106171059976](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106171059976.png)

（2）运用代码传参

![image-20191106171904383](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106171904383.png)

## 8. router  和 route的由来

### 8.1 关于router

![image-20191106173251801](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106173251801.png)

![image-20191106173435336](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106173435336.png)

### 8.2 关于route

![image-20191106173701213](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20191106173701213.png)

就是当前活跃的路由

结论：所有的组件都继承着Vue的原型 （可以看router的源码）













# 三、VueX

# 四、网络请求的封装（axios）













